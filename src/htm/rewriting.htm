<h2>Rewriting languages are typically made of rules and a starting state.</h2>

<p>These languages often have two phases; the first gives <b>a set of rules</b>, and the second provides <b>an accumulator</b> on which those rules are to be applied. For example, a program for a string rewriting system with wildcards begins with a series of rules which define strings to match, a relation(->), and the resulting transformation.</p>

<pre>
<i>rule</i>            swap ?x ?y -> ?y ?x
<i>accumulator</i>     swap foo bar
<i>transformation</i>  bar foo
</pre>

<p>When a rule consumes a specific token during the application, we'll call this token the <b>reagent</b>. When a rule utilizes a specific token that survives the rewrite, we'll call it the <b>catalyst</b>. </p>

<pre>
dup a   -> a a  <i>dup is a reagent</i>
sub a b -> sub  <i>sub is a catalyst</i>
</pre>

<h3>Bestiary</h3>

<table border='1'>
	<tr><th colspan='2'>Reducers</th></tr>
	<tr><th>erase</th><td><pre>a -></pre></td></tr>
	<tr><th>subtract</th><td><pre>a b -></pre></td></tr>
	<tr><th>join</th><td><pre>b c -> a</pre></td></tr>
	<tr><th>halve</th><td><pre>a a -> a</pre></td></tr>

	<tr><th colspan='2'>Movers</th></tr>
	<tr><th>move</th><td><pre>a -> b</pre></td></tr>
		<tr><th>ring(blink)</th><td><pre>a -> b
b -> a</pre></td></tr>
	<tr><th>ring</th><td><pre>a -> b
b -> c
c -> a</pre></td></tr>

	<tr><th colspan='2'>Growers</th></tr>
	<tr><th>duplicate</th><td><pre>a -> a a</pre></td></tr>
	<tr><th>double</th><td><pre>a -> b b</pre></td></tr>
	<tr><th>fork</th><td><pre>a -> b c</pre></td></tr>
</table>

<img src='../media/refs/grue.png' style='width:300px' title='Bivotar & Juranda, Zork'/>
