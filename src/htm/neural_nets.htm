<h2>In a neural net, synthetic neurons are used as the base computational unit.</h2>

<p>A <b>neuron</b> has a given number of incoming and outgoing connections to other neurons, it gives out an output that stimulates or inhibits other neurons when the sum of its inputs goes over a threshold arity value. A neuron with an arity of zero will always fire.</p>

<img src='../media/refs/neuron.png' height='60'/>
<cite style='max-width:400px'>A neuron connected by two excitatory fibers, one inhibitory fiber, with an arity of two.</cite>

<h3>A Notation</h3>

<p>Typically, neural networks are programmed with flow diagrams, I found those to be prone to clutter. Instead, this documentation will use a rule-based textual representation, which allows networks to be created more rapidly and precisely.</p>

<pre>
A neuron*. <i style='float:right'>neuron/0</i>
</pre>

<p>In a rule, a neuron is specified by ending a word with a star, an excitatory connection is separated by a colon, an inhibitory connection is separated by a semi-colon, a rule is terminated by a comma, everything else is ignored. For example, the <code>fire/2</code> neuron is the same as the drawing above.</p>

<pre>
I have matches*, and some kindling*:
	I can make a fire*. <i style='float:right'>fire/2</i>

But if it's raining*;
	I cannot make a fire*.

I have matches* and kindling*. <i style='float:right'>matches/0, kindling/0</i>
</pre>

<img src='../media/refs/bigtop.png'/>

<h3>Programming with Neural Nets</h3>

<p>In the example above, for each step of the evaluation, the <code>matches/0</code> and <code>kindling/0</code> will send excitatory signals to the <code>fire/2</code> neuron. Let's say we want a neuron to fire once and turn off:</p>

<pre>
hello-world*; hello-world*.

Print hello-world*, and turn itself off.
</pre>

<p>A program will most likely involve starting a program with an initial <code>signal/1</code>. To do so, we can fork the self-deactivating <code>init*</code> neuron into a second connection to the rest of our program:</p>

<table border='1'>
<tr>
<th width='300'>Network</th>
<th>Evaluation</th>
</tr>
<tr>
<td>
<pre>
init*; init*: signal*.

The signal* will fire once:
	and activate the program*.

init* my program.
</pre>
</td>
<td>
<pre>
00 init/1 
01 signal/1 
02 program/1
</pre>
</td>
</tr>
</table>

<h3>Loops</h3>

<p>Loops can be created by connecting neurons in a circle. In the following program, 3 neurons are connected in a circle, and whenever the <code>c/1</code> neuron fires, a neuron <code>bang/1</code> triggers.</p>

<table border='1'>
<tr>
<th width='300'>Network</th>
<th>Evaluation</th>
</tr>
<tr>
<td>
<pre>
init*; init*.
init*: a*.

a*: b*.
b*: c*.
c*: a* bang*.

init* my loop.
</pre>
</td><td>
<pre>
00 init/1 
01 a/1 
02 b/1 
03 c/1 
04 a/1 bang/1 
05 b/1 
06 c/1 
07 a/1 bang/1 
08 b/1 
..</pre>
</td>
</tr>
</table>


<h3>Logic</h3>

<p>Logic is implemented by a combination of inhibitory and excitatory fibers.</p>

<img src='../media/refs/neuron_logic.png'/>

<p>Here are the implementation of a <code>AND/2</code> and <code>OR/1</code> gates.</p>
<pre>
a*; a*.
b*; b*.

a* b*: AND*.

a*: OR*.
b*: OR*.

Activate both a* & b*.
</pre>

<h3>Fizzbuzz</h3>

<p>Different parts of a program can run mostly isolated from each other, for example, in a program that prints <i>fizz</i> at t%3, and <i>buzz</i> at t%5, do not need to be connected to each other other:</p>

<pre>
init-f*; init-f*. init-f*: f0*.
init-b*; init-b*. init-b*: b0*.

The fizz network.

f0*: f1*.
f1*: f2*.
f2*: f0* fizz*.

The buzz network.

b0*: b1*.
b1*: b2*.
b2*: b3*.
b3*: b4*.
b4*: b0* buzz*.

First off, init-f* and init-b* in the fizzbuzz program.
</pre>

<!--
<h3>Arithmetic</h3>
-->

<h3>Implementation</h3>
<p>An implementation of the full symbolic runtime is about <a href='ansi_c.html'>150
lines</a>:</p>

<div class='codeview'>
	<iframe src='../etc/neur.c.txt'></iframe>
	<pre>cc neur.c -o neur <a href='../etc/neur.c.txt' target='_blank'>view raw</a></pre>
</div>

<p>By virtue of the similarities this system shares with other <a href='rewriting.html'>rewriting systems</a>, by being programmed by specifying rules and an initial state, resembles a rewriting language enough that I thought it should classified as such.</p>

<ul>
	<li><a href='https://www.i-programmer.info/babbages-bag/325-mcculloch-pitts-neural-networks.html' target='_blank'>The McCulloch-Pitts Neuron</a></li>
	<li><a href='https://justinmeiners.github.io/neural-nets-sim' target='_blank'>Simulator</a></li>
</ul>
