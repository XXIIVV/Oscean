<h2>Vera is a multiset rewriting system.</h2>

<p>Vera is a multiset rewriting system designed to converse with computers,
created by the same author as <a href='modal.html'>Modal</a>. A program is made
entirely of facts and rules:</p>

<pre>
|| The first character in a file assigns a spacer glyph.
|| A program is made of rules and facts.

|| Two spacers indicate the creation of facts
|| Facts are separated by commas, a matchbox, a log, paper

| A rule has a left side | And a right side.
| Facts on the left side | are replaced by facts in the right side

| a flame, a log | a warm fire
| a matchbox | a match, a match a box
| a match, paper | a flame
</pre>

<h3>Spacer</h3>
<p>The first character in a file assigns a <b>spacer</b> glyph to be used to
indicate rules and facts, the pipe character <kbd>|</kbd> is most commonly
used:</p>
<pre>
| this is a rule |
|| this is a fact, this is another fact
</pre>

<h3>Facts</h3>
<p>A <b>fact</b> is the name for an item in the bag, the bag is the collection
of all existing facts. A line starting with two spacing characters(also called an
empty rule) will add facts to the bag, facts are comma separated:</p>

<pre>
|| a fact, another fact
|| one more fact,
	yet another,
	a last fact
</pre>

<p>Whitespace only exists to separate the words in a fact, but are not significant when matching facts. These 3 facts are equal:</p>
<pre>
|| a new fact, a   new fact, a new   fact
</pre>

<h3>Rules</h3>
<p>A <b>rule </b>is made of a left and often a right side, and indicate facts to
remove and replace in the bag.</p>

<pre>
| a fact, another fact | the result
| another rule | another result
| a rule may not have a right side | 
</pre>

<h3>Evaluation</h3>
<p>In turn, each rule is matched against the existing facts found in the bag,
starting from the first rule, when a rule's left-hand side is found in the bag,
these facts are replaced by the rule's right-hand side, and matching is started
again from the top. </p>

<pre>
|flour, sugar, apples| apple cake
|apples, oranges, cherries| fruit salad
|fruit salad, apple cake| fruit cake

|| sugar, oranges, apples, apples, cherries, flour
</pre>

<p>Vera will match any amount found in the left-hand side, the following two
rules are equivalent in Vera:</p>

<pre>
| an apple, hunger | a core
| an apple, an apple, an apple, hunger | a core
</pre>

<h3>Comments</h3>
<p>Vera will discard a rule when all the facts found in its left-hand side are not
present in any rule's right-hand side or declared as facts.</p>
<pre>
| yellow | This is a comment.
| purple | This is not a comment.
| # | This is also a comment.
|| purple
</pre>

<h3>Implementation</h3>
<p>The language runtime can be implemented in about <a href='ansi_c.html'>200 lines</a>.</p>
<div class='codeview'>
	<iframe src='../etc/vera.c.txt'></iframe>
	<pre>cc vera.c -o vera <a href='../etc/vera.c.txt' target='_blank'>view raw</a></pre>
</div>

<ul>
	<li><a href='https://git.sr.ht/~rabbits/vera' target='_blank'>Vera Interpreter(C89)</a>, used for this documentation.</li>
	<li><a href='https://git.casuallyblue.dev/nova/wiki/wiki/A-Raven's-Flyby-of-Vera' target='_blank'>A Raven's Flyby</a>, tutorial.</li>
	<li><a href='https://wiki.nova-lang.net/index.php?title=Main_Page' target='_blank'>Vera Wiki</a></li>
</ul>


