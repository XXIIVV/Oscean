<h2>Ternary numbers are a base 3 numeral system.</h2>

<p>Base 10 is famously well suited to those of us who count on our fingers. Base
2 dominates computing technology because <a href='binary.html'>binary</a>
devices are simple and reliable, with just two stable states on or off. The
cultural preference for base 10 and the engineering advantages of base 2 have
nothing to do with any intrinsic properties of the decimal and binary numbering
systems.</p>

<p>Base 3, on the other hand, does have a genuine mathematical distinction in
its favor. By one plausible measure, it is the most efficient of all integer
bases; it offers the most economical way of representing numbers as it is
closer than binary to the most economical radix base(2.718) to represent
arbitrary numbers, when economy is measured as the product of the radix and the
number of digits needed to express a given range of values.</p>

<table border='1'>
	<tr><th>Truth value</th><th>Unsigned trit</th><th>Balanced trit</th></tr>
	<tr><td>false</td><td>0</td><td>-</td></tr>
	<tr><td>unknown</td><td>1</td><td>0</td></tr>
	<tr><td>truth</td><td>2</td><td>+</td></tr>
</table>

<img src='../media/refs/3eyes.jpg' width='200'/>

<h3>Balanced Ternary</h3>

<p>The digits of a balanced ternary numeral are coefficients of powers of 3, but
instead of coming from the set {0, 1, 2}, the digits are {-, 0 and +}. They are
<i>balanced</i> because they are arranged symmetrically about zero.</p>

<table border='1'>
	<tr><th colspan="2">Unsigned</th><th colspan="2">Balanced</th></tr>
	<tr><th>Dec.</th><th>Tern.</th><th>Tern.</th><th>Dec.</th></tr>
	<tr><td>0</td><td>00</td><td>--</td><td>-4</td></tr>
	<tr><td>1</td><td>01</td><td>-0</td><td>-3</td></tr>
	<tr><td>2</td><td>02</td><td>-+</td><td>-2</td></tr>
	<tr><td>3</td><td>10</td><td>0-</td><td>-1</td></tr>
	<tr><td>4</td><td>11</td><td>00</td><td>0</td></tr>
	<tr><td>5</td><td>12</td><td>0+</td><td>1</td></tr>
	<tr><td>6</td><td>20</td><td>+-</td><td>2</td></tr>
	<tr><td>7</td><td>21</td><td>+0</td><td>3</td></tr>
	<tr><td>8</td><td>22</td><td>++</td><td>4</td></tr>
</table>

<p>Arithmetic is nearly as simple as it is with binary numbers; in particular,
the multiplication table is trivial. Addition and subtraction are essentially
the same operation: Just negate one number and then add. Negation itself is
also effortless: Change every N into a 1, and vice versa. Rounding is mere
truncation: Setting the least-significant trits to 0 automatically rounds to
the closest power of 3.</p>

<h3>Encoding</h3>
<p>Five trits can be stored in a byte by using modulo and division, this
technique can store 243 possible values in a byte:</p>
<pre>
(n % 3) + '0', n /= 3;
</pre>

<p>If the number is encoded first into something like a float, it makes
unpacking <a href='https://compilade.net/blog/ternary-packing'
target='_blank'>possible without division</a>:</p>
<pre>
uint8_t q = (((uint16_t) i) * 256 + (243 - 1)) / 243;
for (int j = 0; j < 5; ++j) {
	uint16_t m = q * 3;
	s2[j] = (m >> 8) + '0';
	q = m & 0xFF;
}
</pre>

<q>Perhaps the prettiest number system of all is the balanced ternary notation.</q>
<cite>Donald E. Knuth, The Art of Computer Programming</cite>

<img src='../media/refs/trefoil.png' width='120'/>
