<h2>A Fractran program is a list of fractions and
an accumulator.</h2>

<p>Any number that can't be divided by any other number, apart from itself and
one, is <a href='primes.html'>prime</a>. Since primes can't be divided, we can
think of them as the DNA of other numbers. In Fractran, each prime is a
register and their exponent is their value. </p>

<figure>
	<img src='../media/refs/vogue-fractran.jpg' width='300'/>
	<figcaption>Typical Fractran Programmer</figcaption>
</figure>

<h3>The Accumulator</h3>

<table border='1' style='float: right;margin-left: 30px;'>
	<tr><th rowspan='2'>Accumulator</th><th colspan='4'>Registers</th></tr>
	<tr><th>r2</th><th>r3</th><th>r5</th><th>r7</th></tr>
	<tr><th>6</th><td>1</td><td>1</td><td></td><td></td></tr>
	<tr><th>18</th><td>1</td><td>2</td><td></td><td></td></tr>
	<tr><th>1008</th><td>4</td><td>2</td><td></td><td>1</td></tr>
	<tr><th>5402250</th><td>1</td><td>2</td><td>3</td><td>4</td></tr>
</table>

<p>The state of the <b>Accumulator</b> is held as a single number, whose prime
factorization holds the value of registers(2, 3, 5, 7, 11, 13, 17, ..). For
example, if the state of the accumulator is 1008(2⁴ × 3² × 7), r2 has the
value 4, r3 has the value 2, r7 has the value 1, and all other registers are
unassigned. </p>

<h3>The Operand</h3>

<img src='../media/refs/fractran.adder1.jpg' width='140px'/>

<p>An <b>Operand</b> is a <a href='fractions.html'>fraction</a> that represents an
instruction that tests one or more registers by the prime factors
of its numerator and denominator. For example, to evaluate the result of
holding 18 in the accumulator with a fraction operand of <code>2/3</code>, we
will take the state of the accumulator, if multiplying it by this fraction will
give us an integer, we will update the accumulator with the result.</p>

<pre>18(2<sup>1</sup> × 3<sup>2</sup>) <b>2/3</b>(2<sup>+1</sup>, 3<sup>-1</sup>) = 12(2<sup>2</sup> × 3<sup>1</sup>)</pre>

<p>Operations become more readable when broken down into their primes. We can
think of every prime number as having a register which can take on non-negative
integer values. Each fraction is an instruction that operates on some of the
registers.</p>

<table border='1'>
	<tr>
		<th>2/3</th>
		<th>15/256</th>
		<th>21/20</th>
	</tr>
	<tr>
		<td>(<span class='numreg'>2</span><sup class='numval'>1</sup>)/(<span class='denreg'>3</span><sup class='denval'>1</sup>)</td>
		<td>(<span class='numreg'>3</span><sup class='numval'>1</sup> × <span class='numreg'>5</span><sup class='numval'>1</sup>)/(<span class='denreg'>2</span><sup class='denval'>6</sup>)</td>
		<td>(<span class='numreg'>3</span><sup class='numval'>1</sup> × <span class='numreg'>7</span><sup class='numval'>1</sup>)/(<span class='denreg'>2</span><sup class='denval'>2</sup> × <span class='denreg'>5</span><sup class='denval'>1</sup>)</td>
	</tr>
	<tr>
		<td>
<pre>
if(<span class='denreg'>r3</span> >= <span class='denval'>1</span>){ 
	<span class='denreg'>r3</span> -= <span class='denval'>1</span>;
	<span class='numreg'>r2</span> += <span class='numval'>1</span>;
	return;
}</pre>
		</td>
		<td>
<pre>
if(<span class='denreg'>r2</span> >= <span class='denval'>6</span>){ 
	<span class='denreg'>r2</span> -= <span class='denval'>6</span>;
	<span class='numreg'>r3</span> += <span class='numval'>1</span>;
	<span class='numreg'>r5</span> += <span class='numval'>1</span>;
	return;
}</pre>
		</td>
		<td>
<pre>
if(<span class='denreg'>r2</span> >= <span class='denval'>2</span> && <span class='denreg'>r5</span> >= <span class='denval'>1</span>){ 
	<span class='denreg'>r2</span> -= <span class='denval'>2</span>; 
	<span class='denreg'>r5</span> -= <span class='denval'>1</span>; 
	<span class='numreg'>r3</span> += <span class='numval'>1</span>; 
	<span class='numreg'>r7</span> += <span class='numval'>1</span>;
	return;
}</pre>
		</td>
	</tr>
</table>

<h3>The Program</h3>

<p>A <b>Program</b> is a list of fractions distributed over lines together with
an initial positive integer input. A program may have any number of lines, and
a line might have the form:</p>

<img src='../media/refs/fractran.adder3.jpg' width='220px'/>

<pre>
210
1: 1/7 ->2, 1/3 ->1
2: 10/3 ->2, 1/1 ->3
3: 3/5 ->3
</pre>

<p>You can interpret a fraction as saying if the current value of each register
is greater than or equal to the value specified by the denominator, you
subtract from the registers all of the values in the denominator, add all the
values specified in the numerator. If any register is less than the value
specified in the denominator, continue to the next fraction.</p>

<pre>
00 | 210                 2^1 3^1 5^1 7^1
01 | 210 × 1/7 = 30/1    2^1 3^1 5^1 ->5 
05 | 30 × 10/3 = 100/1   2^2 5^2 ->5 
05 | 100 × 10/3 = 1000/3 .. 
07 | 100 × 1/1 = 100/1   2^2 5^2 ->9 
09 | 100 × 3/5 = 60/1    2^2 3^1 5^1 ->9 
09 | 60 × 3/5 = 36/1     2^2 3^2 ->9 
09 | 36 × 3/5 = 108/5    .. 
11 | 36                  2^2 3^2
Completed in 8 cycles.
</pre>

<ul>
    <li>For each fraction in the list for which the multiplication of the accumulator and the fraction is an integer, replace the accumulator by the result of that multiplication.</li>
    <li>Repeat this rule until no fraction in the list produces an integer when multiplied by the accumulator, then halt.</li>
</ul>

<figure>
	<img src='../media/refs/fractran.jpg' width='340'/>
	<figcaption>The Book of Numbers, <a href='https://en.wikipedia.org/wiki/John_Horton_Conway' target='_blank'>John Conway</a></figcaption>
</figure>

<h3>Rewriting</h3>

<p><a href='https://wryl.tech' target='_blank'>Wryl</a>, who created <a href='modal.html'>Modal</a>, demonstrated to me an interesting connection between Fractran and <a href='rewriting.html'>rewriting languages</a>. We need only to compile our rules and point the prime registers to symbols in a dictionary to see this relationship more clearly.</p>

<pre>
:: purple orange > brown
:: blue red > purple
:: yellow red > orange

blue yellow red red
</pre>

<p>In a rule definition, we find symbols to the left-side of the caret to be rewritten by what is found on the right-side. Each new symbol is added to the dictionary and represented internally as a prime number. The previous program will compile to something like the following internal representation:</p>

<pre>
:: 5/6 purple.2 orange.3 > brown.5 
:: 2/77 blue.7 red.11 > purple.2 
:: 3/143 yellow.13 red.11 > orange.3 

AC 11011 blue red red yellow
</pre>

<p>Rules are tested in a sequence from the first to the last, when a valid rewrite rule is encountered, the accumulator is updated, and the PC moved back at the first rule:</p>

<pre>
AC 11011 blue red red yellow 
01 11011 × 2/77 = 286, purple red yellow 
02 286 × 3/143 = 6, purple orange 
00 6 × 5/6 = 5, brown
</pre>

<h3>Logic</h3>

<p>Logic gates can be implemented using rewrite rules:</p>

<pre>
:: x y and > true
:: x and > false
:: y and > false

AC 30 x y and 
00 30 × 7/30 = 7, true
</pre>

<h3>Implementation</h3>

<p>The rewriting implementation of the runtime can be implemented in about <a href='ansi_c.html'>200
lines</a>.</p>

<div class='codeview'>
	<iframe src='../etc/fractran.c.txt'></iframe>
	<pre>cc fractran.c -o fractran <a href='../etc/fractran.c.txt' target='_blank'>view raw</a></pre>
</div>

<q>The wise marvels at the commonplace.</q>
<cite>Confucius</cite>

<ul>
	<li><a href='https://git.sr.ht/~rabbits/fractran' target='_blank'>Fractran Interpreter(C89)</a></li>
	<li><a href='https://tjwei.github.io/Fractran' target='_blank'>Fractran Interpreter(Web)</a></li>
	<li><a href='https://esoteric.codes/blog/an-intro-to-fractran' target='_blank'>Intro to Fractran</a></li>
	<li><a href='https://esolangs.org/wiki/Fractran' target='_blank'>Article on Esolang</a></li>
	<li><a href='https://esolangs.org/wiki/Collatz_function' target='_blank'>Collatz function</a></li>
	<li><a href='https://raganwald.com/2020/05/03/fractran.html' target='_blank'>Remembering John Conway</a></li>
</ul>

<style>
	.numreg { background:#72dec2; color: black; padding: 0 2px; border-radius: 3px; }
	.numval { background:#b3f2c6; color: black; padding: 0 2px; border-radius: 3px; }
	.denreg { background:#f78f84; color: black; padding: 0 2px; border-radius: 3px; }
	.denval { background:#ffd18c; color: black; padding: 0 2px; border-radius: 3px; }
</style>
