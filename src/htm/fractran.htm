<h2>A Fractran program is a list of <a href='fractions.html'>fractions</a> and
an initial positive integer input.</h2>

<p>Any number that can't be divided by any other number, apart from itself and
one, is <a href='primes.html'>prime</a>. Since primes can't be divided, we can
think of them as the DNA of other numbers. In Fractran, each prime is a
register and their exponent is their value. </p>

<figure>
	<img src='../media/refs/fractran.jpg' width='340'/>
	<figcaption>The Book of Numbers, <a href='https://en.wikipedia.org/wiki/John_Horton_Conway' target='_blank'>John Conway</a></figcaption>
</figure>

<h3>The Accumulator</h3>

<p>The state of the <b>Accumulator</b> is held as a single number, whose prime
factorization holds the value of registers(2, 3, 5, 7, 11, 13, 17, ..). For
example, if the state of the accumulator is 1008(2⁴ × 3² × 7), r2 has the
value 4, r3 has the value 2, r7 has the value 1, and all other registers are
unassigned. </p>

<table border='1'>
	<tr><th rowspan='2'>Accumulator</th><th colspan='4'>Registers</th></tr>
	<tr><th>r2</th><th>r3</th><th>r5</th><th>r7</th></tr>
	<tr><th>6</th><td>1</td><td>1</td><td></td><td></td></tr>
	<tr><th>18</th><td>1</td><td>2</td><td></td><td></td></tr>
	<tr><th>1008</th><td>4</td><td>2</td><td></td><td>1</td></tr>
	<tr><th>5402250</th><td>1</td><td>2</td><td>3</td><td>4</td></tr>
</table>

<h3>The Operator</h3>

<img src='../media/refs/fractran.adder1.jpg' width='140px'/>

<p>An <b>Operator</b> is a positive fraction, each fraction represents an
instruction that tests one or more registers, represented by the prime factors
of its denominator. The Fractran computer goes through each fraction in order,
in terms of our current accumulator value.</p>

<pre>18(2<sup>1</sup> × 3<sup>2</sup>) <b>2/3</b> = 8(2<sup>3</sup>) <i>addition r2+r3->r2</i></pre>

<p>To run the <i>adder operation</i>(<code>2/3</code>), we will take the state
of the accumulator. If multiplying it by this fraction will give us an integer,
we will do so and start again at the beginning of the program. Otherwise, we
will stop and consider the program complete. We will do this repeatedly until
we can no longer produce an integer with this method. </p>

<table border='1'>
	<tr><th rowspan='2'>steps</th><th rowspan='2'>state</th><th colspan='2'>registers</th></tr>
	<tr><th>r2</th><th>r3</th></tr>
	<tr><td>1</td><th>18</th><td>1</td><td>2</td><td>18 × 2/3 = 12/1</td><td>INT, RESTART</td></tr>
	<tr><td>2</td><th>12</th><td>2</td><td>1</td><td>12 × 2/3 = 8/1</td><td>INT, RESTART</td></tr>
	<tr><td>3</td><th>8</th><td>3</td><td></td><td>8 × 2/3 = 16/3</td><td>NOT INT, END</td></tr>
</table>

<p>To add the values 1 and 2, we will store the values in registers 2 and 3, our
starting state is therefore 18(2<sup>1</sup> × 3<sup>2</sup>).</p>

<p>For each step of the program, we will multiply our state with the program(18
× 2/3 = 12, 12 × 2/3 = 8, ..) until our our working value cannot be reduced
to a whole number(16/3), we have exhausted the program. Alternatively, the
program <code>3/2</code> will do the same operation but store the result in the
register 3. </p>

<pre>576(2<sup>6</sup> × 3<sup>2</sup>) <b>1/6</b> = 16(2<sup>4</sup>) <i>subtraction r2-r3->r2</i></pre>

<p>Operations become more readable when broken down into their primes. We can
think of every prime number as having a register which can take on non-negative
integer values. Each fraction is an instruction that operates on some of the
registers.</p>

<table border='1'>
	<tr>
		<th>2/3</th>
		<th>15/256</th>
		<th>21/20</th>
	</tr>
	<tr>
		<td>(<span class='numreg'>2</span><sup class='numval'>1</sup>)/(<span class='denreg'>3</span><sup class='denval'>1</sup>)</td>
		<td>(<span class='numreg'>3</span><sup class='numval'>1</sup> × <span class='numreg'>5</span><sup class='numval'>1</sup>)/(<span class='denreg'>2</span><sup class='denval'>6</sup>)</td>
		<td>(<span class='numreg'>3</span><sup class='numval'>1</sup> × <span class='numreg'>7</span><sup class='numval'>1</sup>)/(<span class='denreg'>2</span><sup class='denval'>2</sup> × <span class='denreg'>5</span><sup class='denval'>1</sup>)</td>
	</tr>
	<tr>
		<td>
<pre>
if(<span class='denreg'>r3</span> >= <span class='denval'>1</span>){ 
	<span class='denreg'>r3</span> -= <span class='denval'>1</span>;
	<span class='numreg'>r2</span> += <span class='numval'>1</span>;
	return;
}</pre>
		</td>
		<td>
<pre>
if(<span class='denreg'>r2</span> >= <span class='denval'>6</span>){ 
	<span class='denreg'>r2</span> -= <span class='denval'>6</span>;
	<span class='numreg'>r3</span> += <span class='numval'>1</span>;
	<span class='numreg'>r5</span> += <span class='numval'>1</span>;
	return;
}</pre>
		</td>
		<td>
<pre>
if(<span class='denreg'>r2</span> >= <span class='denval'>2</span> && <span class='denreg'>r5</span> >= <span class='denval'>1</span>){ 
	<span class='denreg'>r2</span> -= <span class='denval'>2</span>; 
	<span class='denreg'>r5</span> -= <span class='denval'>1</span>; 
	<span class='numreg'>r3</span> += <span class='numval'>1</span>; 
	<span class='numreg'>r7</span> += <span class='numval'>1</span>;
	return;
}</pre>
		</td>
	</tr>
</table>

<p>You can interpret a fraction as saying if the current value of each register
is greater than or equal to the value specified by the denominator, you
subtract from the registers all of the values in the denominator, add all the
values specified in the numerator, and then jump back to the first instruction.
Otherwise, if any register is less than the value specified in the denominator,
continue to the next fraction.</p>

<h3>The Program</h3>

<p>A <b>Program</b> is a list of fractions distributed over lines together with
an initial positive integer input. A program may have any number of lines, and
a line might have the form:</p>

<img src='../media/refs/fractran.adder3.jpg' width='220px'/>

<pre>
line 1: 1/7 -> 2, 1/3 -> 1
line 2: 10/3 -> 2, 1/1 -> 3
line 3: 3/5 -> 3, 1/1 -> 1
</pre>

<p>In the example below, the machine replaces the Accumulator(A) by the result of
2/3 × A, if this is again an integer, the evaluation goes to line 7. If the
result is not an integer, but 4/5 × A is, we instead replace A by the result
of 4/5 × A and go to line 14. If neither result in an integral, we stop at
line 13.</p>

<pre>
line 13: 2/3 -> 7, 4/5 -> 14
</pre>

<ul>
    <li>For each fraction in the list for which the multiplication of the accumulator and the fraction is an integer, replace the accumulator by the result of that multiplication.</li>
    <li>Repeat this rule until no fraction in the list produces an integer when multiplied by the accumulator, then halt.</li>
</ul>

<p>Let's put together an adder program similar from the one above(<code>2/3</code>) but which writes to a third register. The following program first moves the content in r2 to r3, and then the content of r3 to r5.</p>

<pre>18(2<sup>1</sup> × 3<sup>2</sup>) <b>3/2 5/3</b> = 125(5<sup>3</sup>) <i>addition r2+r3->r5(9 steps)</i></pre>

<p>Alternatively, a faster way to do this would be to directly move powers of 2 over to 5, then powers of 3.</p>

<pre>18(2<sup>1</sup> × 3<sup>2</sup>) <b>5/2 5/3</b> = 125(5<sup>3</sup>) <i>addition r2+r3->r5(7 steps)</i></pre>

<p>Each of the 7 steps of this last program looks like: </p>

<pre>
18 5/2 5/3           [18]  r2=01 r3=02
------------------   -----------------
18 × 5/2 = 45/1      [45]  r3=02 r5=01
45 × 5/2 = 225/2 
45 × 5/3 = 75/1      [75]  r3=01 r5=02
75 × 5/2 = 375/2 
75 × 5/3 = 125/1     [125] r5=03
125 × 5/2 = 625/2 
125 × 5/3 = 625/3    [125] r5=03
</pre>

<p>Both of these programs are destructive, meaning that they drain the registers of their original values. We can make (<code>2/3</code>) less destructive with (<code>10/3</code>) by storing a copy of r3 in r5. And we can create a non-destructive adder but this requires coming in with the program with the flag r7 set: </p>

<pre>126(2<sup>1</sup> × 3<sup>2</sup> × 7<sup>1</sup>) <b>7/11 715/14 935/21 1/7 2/13 3/17</b> = 2250(2<sup>1</sup> × 3<sup>2</sup> × 5<sup>3</sup>)</pre>

<p>As an extra demonstration, let us consider the following programs representing all the <a href='binary.html'>logic gates</a>: </p>

<table border='1'>
	<tr><th></th><th>Program</th><td><code>07</code></td><td><code>14</code></td><td><code>21</code></td><td><code>42</code></td></tr>
	<tr><th>AND Gate</th><td><code>5/42 1/21 1/14 1/7</code></td><td>1</td><td>1</td><td>1</td><td>5</td></tr>
	<tr><th>OR Gate</th><td><code>5/42 5/21 5/14 1/7</code></td><td>1</td><td>5</td><td>5</td><td>5</td></tr>
	<tr><th>XOR Gate</th><td><code>1/42 5/21 5/14 1/7</code></td><td>1</td><td>5</td><td>5</td><td>1</td></tr>
	<tr><th>NAND Gate</th><td><code>1/42 5/21 5/14 5/7</code></td><td>5</td><td>5</td><td>5</td><td>1</td></tr>
	<tr><th>NOR Gate</th><td><code>1/42 1/21 1/14 5/7</code></td><td>5</td><td>1</td><td>1</td><td>1</td></tr>
	<tr><th>XNOR Gate</th><td><code>5/42 1/21 1/14 5/7</code></td><td>5</td><td>1</td><td>1</td><td>5</td></tr>
</table>

<h3>Extras</h3>

<p>I've been scratching at trying to fit a fractran-inspired vm hosted in uxn's 16-bit space where these fractions operate differently to facilitate running with low values in registers.</p>

<table border='1'>
	<tr><th><code>*/*</code></th><td>Jump</td></tr>
	<tr><th><code>*/0</code></th><td>Push Acc/Load from memory</td></tr>
	<tr><th><code>0/*</code></th><td>Pop Acc/Save in memory</td></tr>
	<tr><th><code>0/0</code></th><td>Pop, or Break</td></tr>
</table>

<q>A wise person marvels at the commonplace.</q>
<cite>Confucius</cite>

<ul>
	<li><a href='https://git.sr.ht/~rabbits/fractran' target='_blank'>Fractran Interpreter(C89)</a></li>
	<li><a href='https://tjwei.github.io/Fractran' target='_blank'>Fractran Interpreter(Web)</a></li>
	<li><a href='https://esoteric.codes/blog/an-intro-to-fractran' target='_blank'>Intro to Fractran</a></li>
	<li><a href='https://esolangs.org/wiki/Fractran' target='_blank'>Article on Esolang</a></li>
	<li><a href='https://esolangs.org/wiki/Collatz_function' target='_blank'>Collatz function</a></li>
	<li><a href='https://en.wikipedia.org/wiki/Register_machine' target='_blank'>Register Machine</a></li>
	<li><a href='https://raganwald.com/2020/05/03/fractran.html' target='_blank'>Remembering John Conway</a></li>
</ul>

<style>
	.numreg { background:pink; color: black }
	.numval { background:#ffdee4; color: black }
	.denreg { background:#72dec2; color: black }
	.denval { background:#ffd18c; color: black }
</style>
