<h2>Church Numerals are a representation of the natural numbers using lambda
notation.</h2>

<p>A kind of <i>base1 arithmetic</i>, in which numbers are represented by
function nesting over an empty list, can be constructed in <a
href='lisp.html'>Pure Lisp</a> using only very few primtives. This document
will present Church Numerals through the lens of Lisp, alternatively one might
prefer to read it coming from the <a href='ornithomicon.html'>Avian
Numerals</a> tutorial.</p>

<p>The following file contains the basic building blocks as an example:</p>

<pre>
(LETREC church
	(church LAMBDA (INPUT)
		(greater?
			(incr (incr (incr (incr nil))))
			(incr (incr (incr nil))))
	)
	(nil QUOTE NULL)
	(#f QUOTE F)
	(#t QUOTE T)
	(incr LAMBDA (x)
		(CONS nil x))
	(decr LAMBDA (x)
		(CDR x))
	(zero? LAMBDA (x)
		(EQ x nil))
	(not LAMBDA (x)
		(IF x #f #t))
	(plus LAMBDA (x y)
		(IF (zero? x) y
			(plus (decr x) (incr y))))
	(minus LAMBDA (x y)
		(IF (zero? y) x
			(minus (decr x) (decr y))))
	(multiply LAMBDA (x y)
		(IF (zero? x) nil
			(plus y (multiply (decr x) y))))
	(equal? LAMBDA (x y)
		(IF (zero? x) (zero? y)
			(IF (zero? y) #f
				(equal? (decr x) (decr y)))))
	(greater? LAMBDA (x y)
		(IF (zero? x) #f
			(IF (zero? y) (not (zero? x))
				(greater? (decr x) (decr y)))))
	(lesser? LAMBDA (x y)
		(greater? y x))
)
</pre>

<article>
	<p>"And you do Addition?" the White Queen asked. "What's one and one and one and one and one and one and one and one and one and one?"</p>
	<p>"I don't know," said Alice. "I lost count."</p>
	<p>"She can't do Addition," the Red Queen interrupted.</p>
</article>
