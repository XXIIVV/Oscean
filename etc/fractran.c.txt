#include <stdio.h>

/*
Copyright (c) 2024 Devine Lu Linvega

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE.
*/

#define TOK_SZ 0x30
#define PRM_SZ 0x80
#define RUL_SZ 0x80
#define SRC_SZ 0x4000
#define PRIME(x) prime_lut[(x - symbols[0]) / TOK_SZ]

typedef struct Fraction {
	unsigned int num, den;
} Fraction;

typedef struct Rule {
	char *a[0x10], *b[0x10];
	unsigned int _a, _b;
	Fraction f;
} Rule;

Rule rules[RUL_SZ], *_rules = rules;
int prime_lut[PRM_SZ], *_prime_lut = prime_lut;
char *accumulator[PRM_SZ], **_accumulator = accumulator;
char symbols[PRM_SZ][TOK_SZ];
int symbols_len;

static int
gcd(int a, int b)
{
	if(b == 0) return a;
	return gcd(b, a % b);
}

static Fraction
Frac(unsigned int num, unsigned int den)
{
	Fraction f;
	int d = gcd(num, den);
	f.num = num / d, f.den = den / d;
	return f;
}

static int
is_prime(int num)
{
	int i = 1;
	while(++i < num)
		if(gcd(i, num) > 1) return 0;
	return 1;
}

static char *
walk_ws(char *_s)
{
	char c;
	while((c = *_s) && c < 0x21) _s++;
	return _s;
}

static char *
walk_token(char *_s)
{
	char c;
	while((c = *_s) && c > 0x20) _s++;
	return _s;
}

static int
find_prime(int prime)
{
	int i = 0;
	for(i = 0; i < PRM_SZ && prime_lut[i] != prime; i++) {};
	return i;
}

static char *
find_symbol(char *token)
{
	int i;
	for(i = 0; i < symbols_len; i++) {
		char *_a = token, *_b = symbols[i];
		while(*_a == *_b) _a++, _b++;
		if(*_b == 0 && *_a < 0x21) return symbols[i];
	}
	return NULL;
}

static char *
make_symbol(char *s)
{
	int i = 0;
	char c, *sym = find_symbol(s);
	if(sym != NULL) return sym;
	if(symbols_len >= PRM_SZ) return NULL;
	sym = symbols[symbols_len++];
	while((c = *s++) && c > 0x20) sym[i++] = c;
	return sym;
}

static char *
parse_comment(char *_s)
{
	char c;
	int depth = 0;
	while((c = *_s++)) {
		if(c == '(') depth++;
		if(c == ')') {
			depth--;
			if(!depth) break;
		}
	}
	return _s + 1;
}

static char *
parse_rule(char *_s)
{
	char c;
	int side = 0;
	Rule *r = _rules++;
	while(*_s) {
		while((c = *_s) && (c == 0x09 || c == 0x20)) _s++;
		if(*_s == 0xa) break;
		if(*_s == '(')
			_s = parse_comment(_s);
		else if(*_s == '>')
			side = 1, _s++;
		else if(*_s > 0x20) {
			if(side)
				r->b[r->_b++] = make_symbol(_s), _s = walk_token(_s);
			else
				r->a[r->_a++] = make_symbol(_s), _s = walk_token(_s);
		}
	}
	return _s + 1;
}

static char *
parse_symbol(char *_s)
{
	if(*_s == '@')
		make_symbol(_s + 1);
	else
		*_accumulator++ = make_symbol(_s);
	return walk_token(_s) + 1;
}

static void
print_r(unsigned int num, int debug)
{
	unsigned int i = 0, fac = 2;
	while(num > 1) {
		if(num % fac == 0) {
			unsigned int pow = 1;
			char *symbol = symbols[find_prime(fac)];
			num /= fac;
			while(!(num % fac)) num /= fac, pow++;
			for(i = 0; i < pow; i++)
				if(debug)
					printf("%s.%d ", symbol, fac);
				else
					printf("%s ", symbol);
		} else
			fac++;
	}
}

int
main(int argc, char *argv[])
{
	unsigned int i, j, acc = 1, pc = 0, fuel = 0x1000;
	char src[SRC_SZ], *_src = src;
	FILE *f;
	if(argc < 2)
		return !printf("Fractran - Fractran Rewriting, 1 Sep 2024.\n");
	if(argc != 2)
		return !printf("usage: fractran input.fra\n");
	if(!(f = fopen(argv[1], "r")))
		return !printf("Source missing: %s\n", argv[1]);
	i = fread(&src, 1, SRC_SZ, f), fclose(f), src[i] = 0x0a;
	/* memorize */
	for(i = 2; i < PRM_SZ; i++)
		if(is_prime(i)) *_prime_lut++ = i;
	/* tokenize */
	while(*_src) {
		_src = walk_ws(_src);
		if(*_src == '(')
			_src = parse_comment(_src);
		else if(_src[0] == ':' && _src[1] == ':')
			_src = parse_rule(_src + 2);
		else if(*_src)
			_src = parse_symbol(_src);
	}
	/* compile */
	for(i = 0; i < _rules - rules; i++) {
		Rule *r = &rules[i];
		r->f.num = 1, r->f.den = 1;
		for(j = 0; j < r->_a; j++)
			r->f.den *= PRIME(r->a[j]);
		for(j = 0; j < r->_b; j++)
			r->f.num *= PRIME(r->b[j]);
	}
	/* print */
	for(i = 0; i < _rules - rules; i++) {
		Rule *r = &rules[i];
		printf(":: %d/%d ", r->f.num, r->f.den), print_r(r->f.den, 1), printf("> "), print_r(r->f.num, 1), printf("\n");
	}
	/* init */
	for(i = 0; i < _accumulator - accumulator; i++)
		acc *= PRIME(accumulator[i]);
	printf("\nAC %d ", acc), print_r(acc, 0), printf("\n");
	/* eval */
	if(_rules == rules) return 0;
	while(fuel--) {
		Rule *r = &rules[pc];
		if(!r->f.num && !r->f.den)
			return 0;
		else if(acc % r->f.den)
			pc++;
		else {
			Fraction res = Frac(acc * r->f.num, r->f.den);
			printf("%02d %u Ã— %u/%u = %u, ", pc, acc, r->f.num, r->f.den, res.num);
			print_r(res.num, 0), printf("\n");
			acc = res.num, pc = 0;
		}
	}
	return 1;
}
