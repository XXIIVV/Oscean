#include <stdio.h>

/*
Copyright (c) 2024 Devine Lu Linvega

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE.
*/

#define PRM_SZ 0x400
#define RUL_SZ 0x800
#define REP_SZ 0x100
#define DIC_SZ 0x1000
#define SRC_SZ 0x8000
#define HLT_SZ 0x100000

typedef struct Frag {
	unsigned char regs[PRM_SZ], *_regs;
} Frag;

typedef struct Rule {
	unsigned long num, den;
	Frag fnum, fden;
} Rule;

char dict[DIC_SZ], *_dict = dict, *syms[PRM_SZ];
unsigned long prime_lut[PRM_SZ], *_prime_lut = prime_lut;
int symbols_len;
Rule rules[RUL_SZ], *_rules = rules;
Frag accu;

static char *
scap(char *s)
{
	if(*s == '"') {
		s++;
		while(*s && *s != '"') s++;
		return s + 1;
	}
	while(*s > 0x20) s++;
	return s;
}

static char *
scpy(char *a, char *b)
{
	char *cap = scap(a);
	while(a < cap) *b++ = *a++;
	return b + 1;
}

static int
scmp(char *a, char *b)
{
	char *acap = scap(a), *bcap = scap(b);
	while(a < acap && b < bcap && *a == *b) a++, b++;
	return a == acap && b == bcap;
}

static unsigned long
gcd(unsigned long a, unsigned long b)
{
	if(b == 0) return a;
	return gcd(b, a % b);
}

static unsigned int
is_prime(unsigned int num)
{
	unsigned int i = 1;
	while(++i < num)
		if(gcd(i, num) > 1) return 0;
	return 1;
}

static unsigned long
find_prime(unsigned long prime)
{
	int i = 0;
	for(i = 0; i < PRM_SZ; i++)
		if(prime_lut[i] == prime) break;
	return i;
}

static int
mask(Frag *frag, unsigned long num)
{
	unsigned long fac = 2;
	frag->_regs = frag->regs;
	while(num > 1) {
		if(num % fac == 0) {
			unsigned long pow = 1;
			num /= fac;
			while(!(num % fac)) num /= fac, pow++;
			if(frag->regs[fac] < pow) return 0;
		} else
			fac++;
	}
	return 1;
}

static void
create(Frag *frag, unsigned long num)
{
	unsigned long fac = 2;
	frag->_regs = frag->regs;
	while(num > 1) {
		if(num % fac == 0) {
			unsigned long pow = 1;
			num /= fac;
			while(!(num % fac)) num /= fac, pow++;
			frag->regs[fac] = (char)pow;
		} else
			fac++;
	}
}

static void
additive(Frag *frag, unsigned long num)
{
	unsigned long fac = 2;
	while(num > 1) {
		if(num % fac == 0) {
			unsigned long pow = 1;
			num /= fac;
			while(!(num % fac)) num /= fac, pow++;
			frag->regs[fac] += (char)pow;
		} else
			fac++;
	}
}

static void
subtractive(Frag *frag, unsigned long num)
{
	unsigned long fac = 2;
	while(num > 1) {
		if(num % fac == 0) {
			unsigned long pow = 1;
			num /= fac;
			while(!(num % fac)) num /= fac, pow++;
			frag->regs[fac] -= (char)pow;
		} else
			fac++;
	}
}

static char **
find_symbol(char *s)
{
	int i;
	for(i = 0; i < symbols_len; i++)
		if(scmp(s, syms[i])) return &syms[i];
	return NULL;
}

static void print_s(FILE *f, char *symbol);

static char *
print_template(FILE *f, char *s)
{
	char **symbol;
	while(*s && *s != '}') {
		while(*s && *s < 0x21) s++;
		symbol = find_symbol(s);
		if(symbol != NULL) {
			if(mask(&accu, prime_lut[symbol - syms])) {
				print_s(f, *symbol);
				while(*s && *s != '}') s++;
				return s + 1;
			}
			s = scap(s);
		} else
			while(*s && *s != '}' && *s > 0x21) fprintf(f, "%c", *s++);
	}
	return s + 1;
}

static void
print_s(FILE *f, char *symbol)
{
	char *_symbol = symbol;
	while(*_symbol) {
		if(*_symbol == '\\' && _symbol[1] == 'n') {
			fprintf(f, "\n"), _symbol += 2;
			continue;
		}
		if(*_symbol == '{') {
			_symbol = print_template(f, _symbol + 1);
			continue;
		}
		if(*_symbol == '#')
			break;
		if(*_symbol != '"')
			fprintf(f, "%c", *_symbol);
		_symbol++;
	}
}

static void
print_frag(FILE *f, Frag *frag, int debug)
{
	int i, j;
	for(i = 0; i < PRM_SZ; i++)
		if(frag->regs[i]) {
			for(j = 0; j < frag->regs[i]; j++)
				if(debug)
					fprintf(f, "%s.%d ", syms[find_prime(i)], i);
				else
					print_s(f, syms[find_prime(i)]), fprintf(f, " ");
		}
}

static char *
parse_symbol(char **dst, char *s)
{
	char **sym = find_symbol(s);
	if(sym != NULL)
		*dst = *sym;
	else
		*dst = syms[symbols_len++] = _dict, _dict = scpy(s, _dict);
	return scap(s);
}

static char *
parse_rule(char *_s)
{
	char c, *sym;
	int side = 0;
	Rule *r = _rules++;
	r->num = r->den = 1;
	while(*_s) {
		while((c = *_s) && (c == 0x09 || c == 0x20)) _s++;
		if(*_s == 0xa || (_s[0] == ':' && _s[1] == ':')) break;
		if(*_s == '>')
			side = 1, _s++;
		else if(*_s > 0x20) {
			_s = parse_symbol(&sym, _s);
			if(side)
				r->num *= prime_lut[find_symbol(sym) - syms];
			else
				r->den *= prime_lut[find_symbol(sym) - syms];
		}
	}
	if(side) {
		create(&r->fnum, r->num), create(&r->fden, r->den);
		fprintf(stderr, ":: %lu/%lu ", r->num, r->den), print_frag(stderr, &r->fden, 1);
		fprintf(stderr, "> "), print_frag(stderr, &r->fnum, 1), fprintf(stderr, "\n");
	} else /* forward declarations */
		_rules--;
	return _s;
}

static void
tokenize(char *buf)
{
	char *_buf = buf, *sym;
	while(*_buf) {
		while(*_buf && *_buf < 0x21) _buf++;
		if(_buf[0] == ':' && _buf[1] == ':')
			_buf = parse_rule(_buf + 2);
		else if(*_buf) {
			_buf = parse_symbol(&sym, _buf);
			additive(&accu, prime_lut[find_symbol(sym) - syms]);
		}
	}
}

static void
eval(int fuel)
{
	int pc = 0;
	while(fuel--) {
		Rule *r = &rules[pc];
		if(!r->den)
			break;
		else if(!mask(&accu, r->den))
			pc++;
		else {
			subtractive(&accu, r->den), additive(&accu, r->num);
			fprintf(stderr, "%02d %lu/%lu ", pc, r->num, r->den);
			print_frag(stderr, &accu, 0), fprintf(stderr, "\n");
			pc = 0;
		}
	}
	print_frag(stdout, &accu, 0), fprintf(stdout, "\n");
}

int
main(int argc, char *argv[])
{
	int i;
	char c, src[SRC_SZ], buf[REP_SZ], *_buf = buf;
	FILE *f;
	if(argc < 2)
		return !printf("Fractran Rewriting, 14 Sep 2024.\nusage: fractran input.fra [arguments..]\n");
	if(!(f = fopen(argv[1], "r")))
		return !printf("Source missing: %s\n", argv[1]);
	create(&accu, 1);
	i = fread(&src, 1, SRC_SZ, f), fclose(f), src[i] = 0x0a;
	/* memorize */
	for(i = 2; _prime_lut - prime_lut < PRM_SZ; i++)
		if(is_prime(i)) *_prime_lut++ = i;
	/* tokenize */
	tokenize(src);
	for(i = 2; i < argc; i++)
		tokenize(argv[i]);
	fprintf(stderr, "\n   "), print_frag(stderr, &accu, 0), fprintf(stderr, "\n");
	/* repl */
	eval(HLT_SZ);
	while(fread(&c, 1, 1, stdin))
		if(c == 0xa) {
			tokenize(buf), eval(HLT_SZ);
			_buf = buf, *_buf = 0;
		} else
			*_buf++ = c, *_buf = 0;
	return 0;
}
